// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.Data.Db;

#nullable disable

namespace TaskManagement.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Entity.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project Alpha"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Project Beta"
                        });
                });

            modelBuilder.Entity("TaskManagement.Entity.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Create ER diagram",
                            DueDate = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 1,
                            ProjectId = 1,
                            Title = "Design DB Schema",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Initialize Web API",
                            DueDate = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 2,
                            ProjectId = 1,
                            Title = "Setup API Project",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Add JWT support",
                            DueDate = new DateTime(2025, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 3,
                            ProjectId = 1,
                            Title = "Implement Authentication",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cover service layer",
                            DueDate = new DateTime(2025, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 1,
                            ProjectId = 1,
                            Title = "Write Unit Tests",
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Configure GitHub Actions",
                            DueDate = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 2,
                            ProjectId = 1,
                            Title = "Setup CI/CD",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Connect React app",
                            DueDate = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 3,
                            ProjectId = 2,
                            Title = "Frontend Integration",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Generate Swagger docs",
                            DueDate = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            Priority = 1,
                            ProjectId = 2,
                            Title = "API Documentation",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Apply EF Core migrations",
                            DueDate = new DateTime(2025, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            Priority = 3,
                            ProjectId = 2,
                            Title = "Database Migration",
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "Fix API endpoints",
                            DueDate = new DateTime(2025, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 2,
                            ProjectId = 2,
                            Title = "Bug Fixing",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Run regression tests",
                            DueDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 1,
                            ProjectId = 2,
                            Title = "Final Testing",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TaskManagement.Entity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Name = "Alice Johnson",
                            Role = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Name = "Bob Smith",
                            Role = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@example.com",
                            Name = "Charlie Brown",
                            Role = "Tester"
                        });
                });

            modelBuilder.Entity("TaskManagement.Entity.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskManagement.Entity.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TaskManagement.Entity.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entity.Entities.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManagement.Entity.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
